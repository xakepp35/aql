// Code generated by goyacc -o parser_gen.go -p aql aql.y. DO NOT EDIT.

//line aql.y:1

package ast

import __yyfmt__ "fmt"

//line aql.y:3
import "github.com/xakepp35/aql/pkg/vmi"

//line aql.y:6
type aqlSymType struct {
	yys   int
	node  vmi.Node
	nodes []vmi.Node
	b     []byte
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const TRUE = 57349
const FALSE = 57350
const NULL = 57351
const PLUS = 57352
const MINUS = 57353
const STAR = 57354
const SLASH = 57355
const PERCENT = 57356
const PIPE = 57357
const ANDAND = 57358
const OROR = 57359
const EQ = 57360
const NEQ = 57361
const LT = 57362
const LE = 57363
const GT = 57364
const GE = 57365
const DOT = 57366
const LBRACK = 57367
const RBRACK = 57368
const LPAREN = 57369
const RPAREN = 57370
const COLON = 57371
const COMMA = 57372
const OVER = 57373
const ARROW = 57374
const UMINUS = 57375

var aqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"TRUE",
	"FALSE",
	"NULL",
	"PLUS",
	"MINUS",
	"STAR",
	"SLASH",
	"PERCENT",
	"PIPE",
	"ANDAND",
	"OROR",
	"EQ",
	"NEQ",
	"LT",
	"LE",
	"GT",
	"GE",
	"DOT",
	"LBRACK",
	"RBRACK",
	"LPAREN",
	"RPAREN",
	"COLON",
	"COMMA",
	"OVER",
	"ARROW",
	"UMINUS",
}

var aqlStatenames = [...]string{}

const aqlEofCode = 1
const aqlErrCode = 2
const aqlInitialStackSize = 16

//line aql.y:110

//line yacctab:1
var aqlExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const aqlPrivate = 57344

const aqlLast = 84

var aqlAct = [...]int8{
	2, 14, 15, 16, 17, 18, 19, 9, 11, 14,
	15, 16, 17, 18, 19, 60, 11, 71, 7, 38,
	39, 40, 8, 61, 20, 58, 70, 64, 12, 65,
	62, 22, 20, 63, 66, 23, 12, 56, 59, 6,
	52, 53, 54, 44, 45, 46, 47, 48, 49, 35,
	36, 5, 37, 50, 51, 24, 25, 26, 27, 28,
	29, 4, 21, 43, 67, 1, 68, 69, 32, 33,
	34, 30, 31, 55, 42, 57, 13, 10, 3, 0,
	0, 0, 0, 41,
}

var aqlPact = [...]int16{
	5, -1000, -1000, 47, 14, 19, 37, 61, 56, -1000,
	25, 5, 5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 69, 5, -3, -1000, -17,
	-5, 14, 19, 37, 61, 61, 61, 61, 61, 61,
	56, 56, -1000, -1000, -1000, -1000, 4, -1, -1000, -1000,
	7, -1000, -1000, 5, -1000, 5, 5, 0, -1000, -11,
	-1000, -1000,
}

var aqlPgo = [...]int8{
	0, 0, 78, 61, 51, 39, 18, 22, 7, 77,
	76, 75, 65,
}

var aqlR1 = [...]int8{
	0, 12, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 6, 6, 6, 7,
	7, 7, 7, 8, 8, 8, 8, 9, 9, 9,
	9, 9, 9, 11, 11, 10, 10, 10, 10, 10,
	10, 10,
}

var aqlR2 = [...]int8{
	0, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	3, 3, 3, 3, 3, 3, 1, 3, 3, 1,
	3, 3, 3, 1, 2, 2, 6, 1, 3, 4,
	6, 4, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3,
}

var aqlChk = [...]int16{
	-1000, -12, -1, -2, -3, -4, -5, -6, -7, -8,
	-9, 11, 31, -10, 4, 5, 6, 7, 8, 9,
	27, 15, 17, 16, 18, 19, 20, 21, 22, 23,
	10, 11, 12, 13, 14, 24, 25, 27, -8, -8,
	-1, -3, -4, -5, -6, -6, -6, -6, -6, -6,
	-7, -7, -8, -8, -8, 4, -1, -11, 28, -1,
	32, 28, 26, 29, 28, 30, 27, -1, -1, -1,
	26, 28,
}

var aqlDef = [...]int8{
	0, -2, 1, 2, 3, 5, 7, 9, 16, 19,
	23, 0, 0, 27, 35, 36, 37, 38, 39, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 24, 25,
	0, 4, 6, 8, 10, 11, 12, 13, 14, 15,
	17, 18, 20, 21, 22, 28, 0, 0, 32, 33,
	0, 41, 29, 0, 31, 0, 0, 0, 34, 0,
	30, 26,
}

var aqlTok1 = [...]int8{
	1,
}

var aqlTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33,
}

var aqlTok3 = [...]int8{
	0,
}

var aqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	aqlDebug        = 0
	aqlErrorVerbose = false
)

type aqlLexer interface {
	Lex(lval *aqlSymType) int
	Error(s string)
}

type aqlParser interface {
	Parse(aqlLexer) int
	Lookahead() int
}

type aqlParserImpl struct {
	lval  aqlSymType
	stack [aqlInitialStackSize]aqlSymType
	char  int
}

func (p *aqlParserImpl) Lookahead() int {
	return p.char
}

func aqlNewParser() aqlParser {
	return &aqlParserImpl{}
}

const aqlFlag = -1000

func aqlTokname(c int) string {
	if c >= 1 && c-1 < len(aqlToknames) {
		if aqlToknames[c-1] != "" {
			return aqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func aqlStatname(s int) string {
	if s >= 0 && s < len(aqlStatenames) {
		if aqlStatenames[s] != "" {
			return aqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func aqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !aqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range aqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + aqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(aqlPact[state])
	for tok := TOKSTART; tok-1 < len(aqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < aqlLast && int(aqlChk[int(aqlAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if aqlDef[state] == -2 {
		i := 0
		for aqlExca[i] != -1 || int(aqlExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; aqlExca[i] >= 0; i += 2 {
			tok := int(aqlExca[i])
			if tok < TOKSTART || aqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if aqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += aqlTokname(tok)
	}
	return res
}

func aqllex1(lex aqlLexer, lval *aqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(aqlTok1[0])
		goto out
	}
	if char < len(aqlTok1) {
		token = int(aqlTok1[char])
		goto out
	}
	if char >= aqlPrivate {
		if char < aqlPrivate+len(aqlTok2) {
			token = int(aqlTok2[char-aqlPrivate])
			goto out
		}
	}
	for i := 0; i < len(aqlTok3); i += 2 {
		token = int(aqlTok3[i+0])
		if token == char {
			token = int(aqlTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(aqlTok2[1]) /* unknown char */
	}
	if aqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", aqlTokname(token), uint(char))
	}
	return char, token
}

func aqlParse(aqllex aqlLexer) int {
	return aqlNewParser().Parse(aqllex)
}

func (aqlrcvr *aqlParserImpl) Parse(aqllex aqlLexer) int {
	var aqln int
	var aqlVAL aqlSymType
	var aqlDollar []aqlSymType
	_ = aqlDollar // silence set and not used
	aqlS := aqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	aqlstate := 0
	aqlrcvr.char = -1
	aqltoken := -1 // aqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		aqlstate = -1
		aqlrcvr.char = -1
		aqltoken = -1
	}()
	aqlp := -1
	goto aqlstack

ret0:
	return 0

ret1:
	return 1

aqlstack:
	/* put a state and value onto the stack */
	if aqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", aqlTokname(aqltoken), aqlStatname(aqlstate))
	}

	aqlp++
	if aqlp >= len(aqlS) {
		nyys := make([]aqlSymType, len(aqlS)*2)
		copy(nyys, aqlS)
		aqlS = nyys
	}
	aqlS[aqlp] = aqlVAL
	aqlS[aqlp].yys = aqlstate

aqlnewstate:
	aqln = int(aqlPact[aqlstate])
	if aqln <= aqlFlag {
		goto aqldefault /* simple state */
	}
	if aqlrcvr.char < 0 {
		aqlrcvr.char, aqltoken = aqllex1(aqllex, &aqlrcvr.lval)
	}
	aqln += aqltoken
	if aqln < 0 || aqln >= aqlLast {
		goto aqldefault
	}
	aqln = int(aqlAct[aqln])
	if int(aqlChk[aqln]) == aqltoken { /* valid shift */
		aqlrcvr.char = -1
		aqltoken = -1
		aqlVAL = aqlrcvr.lval
		aqlstate = aqln
		if Errflag > 0 {
			Errflag--
		}
		goto aqlstack
	}

aqldefault:
	/* default state action */
	aqln = int(aqlDef[aqlstate])
	if aqln == -2 {
		if aqlrcvr.char < 0 {
			aqlrcvr.char, aqltoken = aqllex1(aqllex, &aqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if aqlExca[xi+0] == -1 && int(aqlExca[xi+1]) == aqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			aqln = int(aqlExca[xi+0])
			if aqln < 0 || aqln == aqltoken {
				break
			}
		}
		aqln = int(aqlExca[xi+1])
		if aqln < 0 {
			goto ret0
		}
	}
	if aqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			aqllex.Error(aqlErrorMessage(aqlstate, aqltoken))
			Nerrs++
			if aqlDebug >= 1 {
				__yyfmt__.Printf("%s", aqlStatname(aqlstate))
				__yyfmt__.Printf(" saw %s\n", aqlTokname(aqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for aqlp >= 0 {
				aqln = int(aqlPact[aqlS[aqlp].yys]) + aqlErrCode
				if aqln >= 0 && aqln < aqlLast {
					aqlstate = int(aqlAct[aqln]) /* simulate a shift of "error" */
					if int(aqlChk[aqlstate]) == aqlErrCode {
						goto aqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if aqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", aqlS[aqlp].yys)
				}
				aqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if aqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", aqlTokname(aqltoken))
			}
			if aqltoken == aqlEofCode {
				goto ret1
			}
			aqlrcvr.char = -1
			aqltoken = -1
			goto aqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production aqln */
	if aqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", aqln, aqlStatname(aqlstate))
	}

	aqlnt := aqln
	aqlpt := aqlp
	_ = aqlpt // guard against "declared and not used"

	aqlp -= int(aqlR2[aqln])
	// aqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if aqlp+1 >= len(aqlS) {
		nyys := make([]aqlSymType, len(aqlS)*2)
		copy(nyys, aqlS)
		aqlS = nyys
	}
	aqlVAL = aqlS[aqlp+1]

	/* consult goto table to find next state */
	aqln = int(aqlR1[aqln])
	aqlg := int(aqlPgo[aqln])
	aqlj := aqlg + aqlS[aqlp].yys + 1

	if aqlj >= aqlLast {
		aqlstate = int(aqlAct[aqlg])
	} else {
		aqlstate = int(aqlAct[aqlj])
		if int(aqlChk[aqlstate]) != -aqln {
			aqlstate = int(aqlAct[aqlg])
		}
	}
	// dummy call; replaced with literal code
	switch aqlnt {

	case 1:
		aqlDollar = aqlS[aqlpt-1 : aqlpt+1]
//line aql.y:42
		{
			aqllex.(*bridge).result = aqlDollar[1].node
		}
	case 4:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:49
		{
			aqlVAL.node = &PipeExpr{Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 6:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:53
		{
			aqlVAL.node = &LogicalExpr{Op: "||", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 8:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:57
		{
			aqlVAL.node = &LogicalExpr{Op: "&&", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 10:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:61
		{
			aqlVAL.node = &CompareExpr{Op: "==", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 11:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:62
		{
			aqlVAL.node = &CompareExpr{Op: "!=", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 12:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:63
		{
			aqlVAL.node = &CompareExpr{Op: "<", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 13:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:64
		{
			aqlVAL.node = &CompareExpr{Op: "<=", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 14:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:65
		{
			aqlVAL.node = &CompareExpr{Op: ">", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 15:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:66
		{
			aqlVAL.node = &CompareExpr{Op: ">=", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 17:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:70
		{
			aqlVAL.node = &BinaryExpr{Op: "+", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 18:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:71
		{
			aqlVAL.node = &BinaryExpr{Op: "-", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 20:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:75
		{
			aqlVAL.node = &BinaryExpr{Op: "*", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 21:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:76
		{
			aqlVAL.node = &BinaryExpr{Op: "/", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 22:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:77
		{
			aqlVAL.node = &BinaryExpr{Op: "%", Left: aqlDollar[1].node, Right: aqlDollar[3].node}
		}
	case 24:
		aqlDollar = aqlS[aqlpt-2 : aqlpt+1]
//line aql.y:81
		{
			aqlVAL.node = &UnaryExpr{Op: "-", X: aqlDollar[2].node}
		}
	case 25:
		aqlDollar = aqlS[aqlpt-2 : aqlpt+1]
//line aql.y:82
		{
			aqlVAL.node = &OverExpr{Seq: aqlDollar[2].node}
		}
	case 26:
		aqlDollar = aqlS[aqlpt-6 : aqlpt+1]
//line aql.y:84
		{
			aqlVAL.node = &OverExpr{Seq: aqlDollar[2].node, Scope: aqlDollar[5].node}
		}
	case 28:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:89
		{
			aqlVAL.node = &FieldSel{X: aqlDollar[1].node, Name: aqlDollar[3].b}
		}
	case 29:
		aqlDollar = aqlS[aqlpt-4 : aqlpt+1]
//line aql.y:90
		{
			aqlVAL.node = &IndexExpr{X: aqlDollar[1].node, I: aqlDollar[3].node}
		}
	case 30:
		aqlDollar = aqlS[aqlpt-6 : aqlpt+1]
//line aql.y:91
		{
			aqlVAL.node = &IndexExpr{X: aqlDollar[1].node, I: aqlDollar[3].node, J: aqlDollar[5].node}
		}
	case 31:
		aqlDollar = aqlS[aqlpt-4 : aqlpt+1]
//line aql.y:92
		{
			id := aqlDollar[1].node.(*Ident)
			aqlVAL.node = &CallExpr{Fun: id.Name, Args: aqlDollar[3].nodes}
		}
	case 32:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:93
		{
			id := aqlDollar[1].node.(*Ident)
			aqlVAL.node = &CallExpr{Fun: id.Name}
		}
	case 33:
		aqlDollar = aqlS[aqlpt-1 : aqlpt+1]
//line aql.y:97
		{
			aqlVAL.nodes = []vmi.Node{aqlDollar[1].node}
		}
	case 34:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:98
		{
			aqlVAL.nodes = append(aqlDollar[1].nodes, aqlDollar[3].node)
		}
	case 35:
		aqlDollar = aqlS[aqlpt-1 : aqlpt+1]
//line aql.y:102
		{
			aqlVAL.node = &Ident{Name: aqlDollar[1].b}
		}
	case 36:
		aqlDollar = aqlS[aqlpt-1 : aqlpt+1]
//line aql.y:103
		{
			aqlVAL.node = &Number{Text: aqlDollar[1].b}
		}
	case 37:
		aqlDollar = aqlS[aqlpt-1 : aqlpt+1]
//line aql.y:104
		{
			aqlVAL.node = &String{Text: aqlDollar[1].b}
		}
	case 38:
		aqlDollar = aqlS[aqlpt-1 : aqlpt+1]
//line aql.y:105
		{
			aqlVAL.node = &Bool{Val: true}
		}
	case 39:
		aqlDollar = aqlS[aqlpt-1 : aqlpt+1]
//line aql.y:106
		{
			aqlVAL.node = &Bool{Val: false}
		}
	case 40:
		aqlDollar = aqlS[aqlpt-1 : aqlpt+1]
//line aql.y:107
		{
			aqlVAL.node = &Null{}
		}
	case 41:
		aqlDollar = aqlS[aqlpt-3 : aqlpt+1]
//line aql.y:108
		{
			aqlVAL.node = aqlDollar[2].node
		}
	}
	goto aqlstack /* stack new state and value */
}
